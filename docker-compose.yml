x-teranode-settings:
  &teranode-settings
  environment:
    network: "teratestnet"
    p2p_bootstrapAddresses: "/dns4/teranode-bootstrap-stage.bsvb.tech/tcp/9901/p2p/12D3KooWJ6kQHAR65xkA34NABsNVAJyVxPWh8JUSo1vtZsTyw4GD"
    # logLevel: "DEBUG"
    # enable this when using your laptop or a server without a public ip
    # someOtherSetting: "value"

networks:
  teranode-network:
    name: my-teranode-network
    # if your docker setup supports IPv6, you can enable it here
    # enable_ipv6: true

volumes:
  nginx-cache:

services:
  # Initialize directories with correct ownership
  # Note: Runs as root to create directories and set ownership before other services start
  data-init:
    image: alpine:latest
    volumes:
      - ${DATA_PATH}:/data
      - ./scripts/init-data.sh:/init-data.sh:ro
    command: sh /init-data.sh
    user: "0:0"  # Required for chown operations

  # Teranode micro-services
  blockchain:
    extends:
      file: ./base/docker-teranode.yml
      service: blockchain
    <<: *teranode-settings
    depends_on:
      - data-init

  asset:
    extends:
      file: ./base/docker-teranode.yml
      service: asset
    <<: *teranode-settings

  asset-cache:
    extends:
      file: ./base/docker-services.yml
      service: asset-cache

  rpc:
    extends:
      file: ./base/docker-teranode.yml
      service: rpc
    <<: *teranode-settings

  subtreevalidation:
    extends:
      file: ./base/docker-teranode.yml
      service: subtreevalidation
    <<: *teranode-settings

  blockvalidation:
    extends:
      file: ./base/docker-teranode.yml
      service: blockvalidation
    <<: *teranode-settings

  blockassembly:
    extends:
      file: ./base/docker-teranode.yml
      service: blockassembly
    <<: *teranode-settings

  peer:
    extends:
      file: ./base/docker-teranode.yml
      service: peer
    <<: *teranode-settings

  # uses lots of disk space
  #  blockpersister:
  #    extends:
  #      file: ../base/docker-teranode.yml
  #      service: blockpersister
  #    <<: *teranode-settings

  # shared services
  postgres:
    extends:
      file: ./base/docker-services.yml
      service: postgres

  kafka-shared:
    extends:
      file: ./base/docker-services.yml
      service: kafka-shared

#  kafka-console-shared:
#    extends:
#      file: ./base/docker-services.yml
#      service: kafka-console-shared

  aerospike:
    extends:
      file: ./base/docker-services.yml
      # Community Edition
      # service: aerospike
      # Enterprise Edition, evaluation mode, single node
      service: aerospike-ee

  aerospike-exporter:
    extends:
      file: ./base/docker-services.yml
      service: aerospike-exporter

  prometheus:
    extends:
      file: ./base/docker-services.yml
      service: prometheus

  grafana:
    extends:
      file: ./base/docker-services.yml
      service: grafana

  # CPU Miner (optional - configured via startup script)
  cpuminer:
    image: ghcr.io/bitcoin-sv/cpuminer:latest
    container_name: cpuminer
    networks:
      - teranode-network
    environment:
      MINING_ENABLED: "${MINING_ENABLED:-false}"
      MINING_ADDRESS: "${MINING_ADDRESS:-}"
      MINING_SIG: "${MINING_SIG:-}"
      RPC_USER: "${RPC_USER:-bitcoin}"
      RPC_PASS: "${RPC_PASS:-bitcoin}"
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "
      if [ \"$$MINING_ENABLED\" = \"true\" ] && [ -n \"$$MINING_ADDRESS\" ]; then
        echo 'Starting CPU miner...';
        echo 'Mining address: '$$MINING_ADDRESS;
        echo 'Miner ID: '$$MINING_SIG;
        exec ./minerd --url=http://rpc:9292 --userpass=$$RPC_USER:$$RPC_PASS --coinbase-addr=$$MINING_ADDRESS --coinbase-sig=\"$$MINING_SIG\" --threads=2;
      else
        echo 'Mining disabled or not configured. Container will exit.';
        exit 0;
      fi
      "
    profiles:
      - mining
    restart: unless-stopped
    depends_on:
      rpc:
        condition: service_healthy
